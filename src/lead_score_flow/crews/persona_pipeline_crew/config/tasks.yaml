evaluate_personas:
  description: >-
    You are given the following data:

    1. Candidate core fields (id, job title, company, function, level, segments)
    2. Up to three lightweight persona matches with rough lexical similarity scores.

    CANDIDATE CONTEXT
    ------------------
    ID: {candidate_id}
    Title: {candidate_title}
    Company: {company_name}
    Function: {job_function}
    Level: {job_level}
    Line of Business: {line_of_business}

    PERSONA MATCHES (JSON)
    ----------------------
    {persona_matches_json}

    Your job:
    - Enrich each persona with a short strengths list (why it fits this candidate)
    - Add potential risks or mismatches
    - Propose 1-3 high-impact messaging hooks referencing candidate context
    - Assign a relevance score 0-100 (do NOT just copy lexical score; reason holistically)
    - Provide an overall_fit short phrase (e.g., "Primary economic buyer", "Influencer", "Unlikely decision-maker")
    - Select EXACTLY one persona as the recommended best for first outreach. Mark recommended=true for that one only.
    - Provide a concise reasoning paragraph justifying the final selection referencing concrete role/LOB/level cues.

    Output MUST be valid JSON matching the CandidatePersonaDeepDive Pydantic schema.
  expected_output: >-
    STRICT: Return ONLY a valid JSON object (no prose, no backticks) matching the CandidatePersonaDeepDive schema with keys: candidate_id, candidate_title, assessments (list of objects with persona_id, persona_name, relevance, strengths, risks, messaging_hooks, overall_fit, recommended), best_persona_id, reasoning.
  agent: deepdive_analyst
  async_execution: false
  # No output_file here; we handle exports in code.
